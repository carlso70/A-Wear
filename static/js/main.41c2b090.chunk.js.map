{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","params","target","id","value","setState","state","loggedIn","user","password","username","console","log","fetch","awearUrl","method","body","JSON","stringify","then","res","catch","err","_this2","react_default","a","createElement","style","margin","reactstrap_es","for","name","onChange","placeholder","type","pass","onClick","login","createAccount","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAmEeA,cA7Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA8BRQ,aAAe,SAACC,GACd,IAAIC,EAAS,GACbA,EAAOD,EAAME,OAAOC,IAAMH,EAAME,OAAOE,MACvCZ,EAAKa,SAASJ,IAhCdT,EAAKc,MAAQ,CACXC,UAAU,EACVC,KAAM,GACNC,SAAU,GACVC,SAAU,IANKlB,uEAWjBmB,QAAQC,IAAI,iBACZD,QAAQC,IAAIjB,KAAKW,+CAIjBK,QAAQC,IAAI,uBACZ,IAAIX,EAAS,CACXS,SAAYf,KAAKW,MAAMI,SACvBD,SAAYd,KAAKW,MAAMG,UAEzBI,MAAMC,2CAAuB,CAC3BC,OAAQ,OACRC,KAAMC,KAAKC,UAAUjB,KACpBkB,KAAK,SAAAC,GACNT,QAAQC,IAAIQ,KACXC,MAAM,SAAAC,GACPX,QAAQC,IAAIU,sCAUP,IAAAC,EAAA5B,KACP,IAAIA,KAAKW,MAAMC,WAAYZ,KAAKW,MAAME,KAGpC,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAU,SACtBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,IAAI,YAAX,YACAN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOE,KAAK,WAAW5B,GAAG,WAAWC,MAAOT,KAAKW,MAAMI,SAAUsB,SAAUrC,KAAKI,aAAckC,YAAY,oBAE5GT,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,IAAI,YAAX,YACAN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOK,KAAK,WAAW/B,GAAG,WAAW4B,KAAK,WAAW3B,MAAOT,KAAKW,MAAM6B,KAAMH,SAAUrC,KAAKI,aAAckC,YAAY,oBAExHT,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQO,QAAS,kBAAMb,EAAKc,UAA5B,SAAoD,IACpDb,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQO,QAAS,kBAAMb,EAAKe,kBAA5B,2BAtDMC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.41c2b090.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst awearUrl = \"https://awear-222521.appspot.com\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      user: {},\n      password: \"\",\n      username: \"\",\n    };\n  }\n\n  login() {\n    console.log(\"Logging in...\");\n    console.log(this.state)\n  }\n\n  createAccount() {\n    console.log(\"Creating account...\");\n    let params = {\n      \"username\": this.state.username,\n      \"password\": this.state.password\n    };\n    fetch(awearUrl + \"/adduser\", {\n      method: 'post',\n      body: JSON.stringify(params)\n    }).then(res => {\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    })\n  }\n\n  handleChange = (event) =>{\n    let params = {};\n    params[event.target.id] = event.target.value;\n    this.setState(params);\n  }\n\n  render() {\n    if (this.state.loggedIn && this.state.user) {\n\n    } else {\n      return (\n        <div style={{ \"margin\": \"40px\" }}>\n          <Form>\n            <FormGroup>\n              <Label for=\"username\">Username</Label>\n              <Input name=\"username\" id=\"username\" value={this.state.username} onChange={this.handleChange} placeholder=\"Enter Username\" />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"password\">Password</Label>\n              <Input type=\"password\" id=\"password\" name=\"password\" value={this.state.pass} onChange={this.handleChange} placeholder=\"Enter Password\" />\n            </FormGroup>\n            <Button onClick={() => this.login()}>Login</Button>{' '}\n            <Button onClick={() => this.createAccount()}>Create Account</Button>\n          </Form>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}